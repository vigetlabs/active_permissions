require 'rails/generators'
require 'rails/generators/active_record'

module ActivePermissions
  class InstallGenerator < Rails::Generators::Base
    include ActiveRecord::Generators::Migration

    source_root File.expand_path('../templates', __FILE__)

    def install_migrations
      migration_template 'migrations/create_permissions.rb', 'db/migrate/create_permissions.rb'
    end

    def install_admin_resources
      copy_file 'active_admin_resources/permissions.rb', 'app/admin/permissions.rb'
    end

    def install_admin_views
      copy_file 'active_admin_views/_form.html.erb', 'app/views/admin/permissions/_form.html.erb'
    end

    def update_active_admin_config
      init_file         = "config/initializers/active_admin.rb"
      user_auth_regex   = /.+# == User Authorization(\n.+)+\n/
      new_authorization = <<-AUTH
  # == User Authorization
  #
  # Active Admin will automatically call an authorization
  # method in a before filter of all controller actions to
  # ensure that there is a user with proper rights. You can use
  # CanCanAdapter or make your own. Please refer to documentation.
  #
  # Generated by ActivePermissions
  config.authorization_adapter = ActivePermissions::Authorizations::PermissionAdapter
      AUTH

      path    = File.expand_path(init_file, destination_root)
      content = File.binread(path)

      if content.match(user_auth_regex)
        gsub_file(init_file, user_auth_regex) { new_authorization }
      else
        inject_into_file(init_file, new_authorization + "\n", after: /ActiveAdmin.setup.+\n/)
      end
    end
  end
end
